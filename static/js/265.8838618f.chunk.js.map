{"version":3,"file":"static/js/265.8838618f.chunk.js","mappings":"oLAAe,SAASA,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OAAO,wBAAKA,M,uLCDRC,EAAU,gCACVC,EAAS,mCAAf,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACcC,IAItC,SAASY,EAAkBC,GAChC,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,gCACOC,EADP,kBACuBa,IAI/C,SAASC,EAAkBC,GAChC,OAAOd,EAAuB,GAAD,OAAIF,EAAJ,iBAAoBgB,EAApB,oBAAkCf,IAG1D,SAASgB,EAAkBD,GAChC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,iBACRgB,EADQ,4BACcf,IAItC,SAASiB,EAAmBF,GACjC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACPgB,EADO,4BACef,M,iKC3BxCkB,GAAOC,EAAAA,EAAAA,OAAK,kBAAM,iCAClBC,GAAUD,EAAAA,EAAAA,OACd,kBAAM,iCAGFE,EAAUC,EAAAA,GAAAA,IAAH,6QAUPC,EAAgBD,EAAAA,GAAAA,IAAH,8CAIJ,SAASE,IACtB,OAA0CC,EAAAA,EAAAA,UAAS,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,OAIjBC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAA6BL,GAASM,KAAKP,KAC1C,CAACC,IAMJ,OACE,gCACGF,IACC,6BACE,mBAAQS,KAAK,SAASC,QARV,WAClBN,EAAS,MAOH,sBAGA,SAAC,IAAD,CAAahC,KAAI,UAAK4B,EAAcW,mBACpC,UAAChB,EAAD,YACE,gBACEiB,IAAG,UApBQ,wCAoBR,OAAsBZ,EAAca,aACvCC,IAAKd,EAAcW,kBAErB,UAACd,EAAD,YACE,sCACA,uBAAIG,EAAce,YAClB,kCACA,uBAAIf,EAAcgB,gBAClB,oCACA,uBAAIhB,EAAciB,OAAOC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,gBAAiBA,EAAjB,iBAGjC,mDACA,SAAC,KAAD,CAAMC,GAAG,OAAT,mBACA,mBACA,SAAC,KAAD,CAAMA,GAAG,UAAT,yBAGJ,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,KAAK,OAAOC,SAAS,SAAChC,EAAD,CAAMH,GAAIa,OACtC,SAAC,KAAD,CAAOqB,KAAK,UAAUC,SAAS,SAAC9B,EAAD,CAASL,GAAIa","sources":["components/PageHeading/PageHeading.jsx","services/themoviedb-api.js","views/MovieDetailsPage.jsx"],"sourcesContent":["export default function PageHeading({ text }) {\n  return <h1>{text}</h1>;\n}\n","const BASEURL = 'https://api.themoviedb.org/3/';\nconst APIKEY = '606cb073ea160aeac28dec084af576e2';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrending() {\n  return fetchWithErrorHandling(\n    `${BASEURL}trending/movie/week?api_key=${APIKEY}`\n  );\n}\n\nexport function fetchSearchMovies(query) {\n  return fetchWithErrorHandling(\n    `${BASEURL}search/movie?api_key=${APIKEY}&query=${query}`\n  );\n}\n\nexport function fetchMovieDetails(id) {\n  return fetchWithErrorHandling(`${BASEURL}movie/${id}?api_key=${APIKEY}`);\n}\n\nexport function fetchMovieCredits(id) {\n  return fetchWithErrorHandling(\n    `${BASEURL}movie/${id}/credits?api_key=${APIKEY}`\n  );\n}\n\nexport function fetchMoviesReviews(id) {\n  return fetchWithErrorHandling(\n    `${BASEURL}/movie/${id}/reviews?api_key=${APIKEY}`\n  );\n}\n","import { useState, useEffect, lazy, Suspense } from 'react';\nimport { Route, Link, Routes, useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport * as moviedbAPI from '../services/themoviedb-api';\nimport PageHeading from 'components/PageHeading';\nimport styled from 'styled-components';\n\nconst Cast = lazy(() => import('./Cast') /* webpackChunkName: \"cast\" */);\nconst Reviews = lazy(\n  () => import('./Reviews') /* webpackChunkName: \"reviews\" */\n);\n\nconst Section = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 10px;\n  background-color: #fff;\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  border-radius: 4px;\n`;\n\nconst InfoContainer = styled.div`\n  margin-left: 10px;\n`;\n\nexport default function MovieDetailsPage() {\n  const [detailsMovies, setDetailsMovies] = useState(null);\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n\n  const BASEURLPICTURE = 'https://image.tmdb.org/t/p/original/';\n\n  useEffect(() => {\n    moviedbAPI.fetchMovieDetails(movieId).then(setDetailsMovies);\n  }, [movieId]);\n\n  const handleClick = () => {\n    navigate('/');\n  };\n\n  return (\n    <>\n      {detailsMovies && (\n        <main>\n          <button type=\"button\" onClick={handleClick}>\n            Go back\n          </button>\n          <PageHeading text={`${detailsMovies.original_title}`} />\n          <Section>\n            <img\n              src={`${BASEURLPICTURE}${detailsMovies.poster_path}`}\n              alt={detailsMovies.original_title}\n            />\n            <InfoContainer>\n              <h2>Overview</h2>\n              <p>{detailsMovies.overview}</p>\n              <h3>Vote</h3>\n              <p>{detailsMovies.vote_average}</p>\n              <h3>Genres</h3>\n              <p>{detailsMovies.genres.map(({ name }) => `${name} `)}</p>\n            </InfoContainer>\n          </Section>\n          <p>Additional information</p>\n          <Link to=\"cast\">Cast</Link>\n          <br />\n          <Link to=\"reviews\">Reviews</Link>\n        </main>\n      )}\n      <Suspense fallback={<div>Loading...</div>}>\n        <Routes>\n          <Route path=\"cast\" element={<Cast id={movieId} />} />\n          <Route path=\"reviews\" element={<Reviews id={movieId} />} />\n        </Routes>\n      </Suspense>\n    </>\n  );\n}\n"],"names":["PageHeading","text","BASEURL","APIKEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchSearchMovies","query","fetchMovieDetails","id","fetchMovieCredits","fetchMoviesReviews","Cast","lazy","Reviews","Section","styled","InfoContainer","MovieDetailsPage","useState","detailsMovies","setDetailsMovies","movieId","useParams","navigate","useNavigate","useEffect","moviedbAPI","then","type","onClick","original_title","src","poster_path","alt","overview","vote_average","genres","map","name","to","Suspense","fallback","path","element"],"sourceRoot":""}