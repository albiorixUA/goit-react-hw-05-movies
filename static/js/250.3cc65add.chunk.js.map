{"version":3,"file":"static/js/250.3cc65add.chunk.js","mappings":"ySAAMA,EAAU,gCACVC,EAAS,mCAAf,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACcC,IAItC,SAASY,EAAkBC,GAChC,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,gCACOC,EADP,kBACuBa,IAI/C,SAASC,EAAkBC,GAChC,OAAOd,EAAuB,GAAD,OAAIF,EAAJ,iBAAoBgB,EAApB,oBAAkCf,IAG1D,SAASgB,EAAkBD,GAChC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,iBACRgB,EADQ,4BACcf,IAItC,SAASiB,EAAmBF,GACjC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACPgB,EADO,4BACef,M,0IC5B/B,SAASkB,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAMMC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,IAAI,EAAG,oCACPC,SAAS,cAGRC,EAAcR,EAAaS,IAAI,SAiBrC,OATAC,EAAAA,EAAAA,YAAU,WACY,OAAhBF,GAGJG,EAAAA,GACqBH,GAClBI,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBf,EAASe,QACjC,CAACL,KAGF,4BACE,SAAC,KAAD,CACEM,cA/BgB,CACpBT,KAAM,IA+BFU,SAnBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBC,EAAaC,OAAOH,OAAOA,GACjCf,EAAgB,CAAEX,MAAO4B,IACzBD,KAiBIG,iBAAkBlB,EAHpB,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,CACEG,KAAK,OACLgB,KAAK,OACLC,YAAY,wBAEd,SAAC,KAAD,CAAcjB,KAAK,UACnB,mBAAQgB,KAAK,SAAb,yBAGHxB,IACC,wBACGA,EAAM0B,KAAI,SAAAC,GAAC,OACV,yBACE,UAAC,KAAD,CAAMC,GAAE,UAAKD,EAAEhC,IAAf,cAAuBgC,EAAEE,mBADlBF,EAAEhC","sources":["services/themoviedb-api.js","views/SearchMovies.jsx"],"sourcesContent":["const BASEURL = 'https://api.themoviedb.org/3/';\nconst APIKEY = '606cb073ea160aeac28dec084af576e2';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrending() {\n  return fetchWithErrorHandling(\n    `${BASEURL}trending/movie/week?api_key=${APIKEY}`\n  );\n}\n\nexport function fetchSearchMovies(query) {\n  return fetchWithErrorHandling(\n    `${BASEURL}search/movie?api_key=${APIKEY}&query=${query}`\n  );\n}\n\nexport function fetchMovieDetails(id) {\n  return fetchWithErrorHandling(`${BASEURL}movie/${id}?api_key=${APIKEY}`);\n}\n\nexport function fetchMovieCredits(id) {\n  return fetchWithErrorHandling(\n    `${BASEURL}movie/${id}/credits?api_key=${APIKEY}`\n  );\n}\n\nexport function fetchMoviesReviews(id) {\n  return fetchWithErrorHandling(\n    `${BASEURL}/movie/${id}/reviews?api_key=${APIKEY}`\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport * as moviedbAPI from '../services/themoviedb-api';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\nexport default function SearchMovies() {\n  const [movie, setMovie] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const initialValues = {\n    name: '',\n  };\n\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(2, 'Must be longer than 2 characters')\n      .required('Required'),\n  });\n\n  const searchQuery = searchParams.get('query');\n\n  const handleSubmit = (values, { resetForm }) => {\n    const inputValue = Object.values(values);\n    setSearchParams({ query: inputValue });\n    resetForm();\n  };\n\n  useEffect(() => {\n    if (searchQuery === null) {\n      return;\n    }\n    moviedbAPI\n      .fetchSearchMovies(searchQuery)\n      .then(({ results }) => setMovie(results));\n  }, [searchQuery]);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <Form>\n          <Field\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"Enter a film title\"\n          ></Field>\n          <ErrorMessage name=\"name\" />\n          <button type=\"submit\">Search</button>\n        </Form>\n      </Formik>\n      {movie && (\n        <ul>\n          {movie.map(m => (\n            <li key={m.id}>\n              <Link to={`${m.id}`}> {m.original_title}</Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n"],"names":["BASEURL","APIKEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchSearchMovies","query","fetchMovieDetails","id","fetchMovieCredits","fetchMoviesReviews","SearchMovies","useState","movie","setMovie","useSearchParams","searchParams","setSearchParams","schema","yup","shape","name","min","required","searchQuery","get","useEffect","moviedbAPI","then","results","initialValues","onSubmit","values","resetForm","inputValue","Object","validationSchema","type","placeholder","map","m","to","original_title"],"sourceRoot":""}