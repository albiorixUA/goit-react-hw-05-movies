{"version":3,"file":"static/js/133.f5c8d14b.chunk.js","mappings":"ySAAMA,EAAU,gCACVC,EAAS,mCAAf,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACcC,IAItC,SAASY,EAAkBC,GAChC,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,gCACOC,EADP,kBACuBa,IAI/C,SAASC,EAAkBC,GAChC,OAAOd,EAAuB,GAAD,OAAIF,EAAJ,iBAAoBgB,EAApB,oBAAkCf,IAG1D,SAASgB,EAAkBD,GAChC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,iBACRgB,EADQ,4BACcf,IAItC,SAASiB,EAAmBF,GACjC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACPgB,EADO,4BACef,M,sHC9B/B,SAASkB,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GACsBN,GACnBO,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBJ,EAAUI,QAClC,CAACR,KAGF,8BACGG,GAAUA,EAAOM,OAAS,GACzB,wBACGN,EAAOO,KAAI,SAAAC,GACV,IAAQf,EAAwBe,EAAxBf,GAAIgB,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QACpB,OACE,2BACE,wBAAKD,KACL,uBAAIC,MAFGjB,SAQf","sources":["services/themoviedb-api.js","views/Reviews.jsx"],"sourcesContent":["const BASEURL = 'https://api.themoviedb.org/3/';\nconst APIKEY = '606cb073ea160aeac28dec084af576e2';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrending() {\n  return fetchWithErrorHandling(\n    `${BASEURL}trending/movie/week?api_key=${APIKEY}`\n  );\n}\n\nexport function fetchSearchMovies(query) {\n  return fetchWithErrorHandling(\n    `${BASEURL}search/movie?api_key=${APIKEY}&query=${query}`\n  );\n}\n\nexport function fetchMovieDetails(id) {\n  return fetchWithErrorHandling(`${BASEURL}movie/${id}?api_key=${APIKEY}`);\n}\n\nexport function fetchMovieCredits(id) {\n  return fetchWithErrorHandling(\n    `${BASEURL}movie/${id}/credits?api_key=${APIKEY}`\n  );\n}\n\nexport function fetchMoviesReviews(id) {\n  return fetchWithErrorHandling(\n    `${BASEURL}/movie/${id}/reviews?api_key=${APIKEY}`\n  );\n}\n","import { useState, useEffect } from 'react';\nimport * as moviedbAPI from '../services/themoviedb-api';\nimport { useParams } from 'react-router-dom';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [review, setReview] = useState(null);\n\n  useEffect(() => {\n    moviedbAPI\n      .fetchMoviesReviews(movieId)\n      .then(({ results }) => setReview(results));\n  }, [movieId]);\n\n  return (\n    <>\n      {review && review.length > 0 ? (\n        <ul>\n          {review.map(el => {\n            const { id, author, content } = el;\n            return (\n              <li key={id}>\n                <h3>{author}</h3>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n}\n"],"names":["BASEURL","APIKEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchSearchMovies","query","fetchMovieDetails","id","fetchMovieCredits","fetchMoviesReviews","Reviews","movieId","useParams","useState","review","setReview","useEffect","moviedbAPI","then","results","length","map","el","author","content"],"sourceRoot":""}